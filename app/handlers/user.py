from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import Message
from sqlalchemy import select
from sqlalchemy.exc import SQLAlchemyError
from app.database.models import User
from app.database.db import get_session
from app.config import config
import logging
from typing import Annotated
from fastapi import Depends

router = Router()
logger = logging.getLogger(__name__)

@router.message(Command("start"))
async def start_cmd(
    message: types.Message,
    session: Annotated[AsyncSession, Depends(get_session)]  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–µ–π
):
    try:
        result = await session.execute(
            select(User).where(User.tg_id == message.from_user.id)
        )
        user = result.scalar_one_or_none()

        if not user:
            new_user = User(
                tg_id=message.from_user.id,
                username=message.from_user.username,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name
            )
            session.add(new_user)
            await session.commit()
            await message.answer("‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
            logger.info(f"New user registered: {message.from_user.id}")
        else:
            await message.answer("üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!")
            logger.debug(f"Existing user: {message.from_user.id}")

    except SQLAlchemyError as e:
        logger.error(f"Database error in start_cmd: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        raise

@router.message(F.text == "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def profile_cmd(
    message: types.Message,
    session: Annotated[AsyncSession, Depends(get_session)]
):
    try:
        result = await session.execute(
            select(User).where(User.tg_id == message.from_user.id)
        )
        user = result.scalar_one()
        
        await message.answer(
            f"üìå –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
            f"ID: {user.tg_id}\n"
            f"–ò–º—è: {user.first_name}\n"
            f"–Æ–∑–µ—Ä–Ω–µ–π–º: @{user.username}\n"
            f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.joined_at}"
        )
    except Exception as e:
        logger.error(f"Error in profile_cmd: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è")
